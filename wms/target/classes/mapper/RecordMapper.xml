<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yr.mapper.RecordMapper">

    <resultMap id="BaseResultMap" type="com.yr.bean.Record">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="goods" column="goods" jdbcType="INTEGER"/>
            <result property="userId" column="user_id" jdbcType="INTEGER"/>
            <result property="adminId" column="admin_id" jdbcType="INTEGER"/>
            <result property="count" column="count" jdbcType="INTEGER"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="remark" column="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,goods,user_id,
        admin_id,count,create_time,
        remark
    </sql>
    <select id="selectAndPageAndLamada" resultType="com.yr.bean.RecordRes">
        <!--因为user_id和admin_id不用于查询条件所以直接使用子查询即可
            #
            #记录表记录物品与取货人、操作人的关系
            #物品表记录物品与仓库、物品分类的关系
            #通过物品的仓库id去查找对应所属的仓库
            #通过物品的分类id去查找所属的物品分类
        -->
        SELECT
        r.*,
        g.name goodsname,
        s.name storagename,
        gt.name goodstypename,
        (SELECT u.name FROM `user` u WHERE u.id = r.user_id)username,
        (SELECT u.name FROM `user` u WHERE u.id = r.admin_id)adminname
        FROM `record` r,`goods` g,`storage` s,`goodstype` gt
        ${ew.customSqlSegment}
    </select>
</mapper>
